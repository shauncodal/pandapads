// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3ekFgeJQEEmC58uuLfkDcf
// Component: 3iRV6jWx2D
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_imbewu_mobile_first.module.css"; // plasmic-import: 3ekFgeJQEEmC58uuLfkDcf/projectcss
import sty from "./PlasmicBannerCarouselItem.module.css"; // plasmic-import: 3iRV6jWx2D/css
import PlusRoundIcon from "./icons/PlasmicIcon__PlusRound"; // plasmic-import: oNedDfWT7/icon

export const PlasmicBannerCarouselItem__VariantProps = new Array("whitecard");

export const PlasmicBannerCarouselItem__ArgProps = new Array();

function PlasmicBannerCarouselItem__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.root__whitecard]: hasVariant(variants, "whitecard", "whitecard")
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__esi7Q)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__tyjRi,
            {
              [sty.text__whitecard__tyjRi3UHbK]: hasVariant(
                variants,
                "whitecard",
                "whitecard"
              )
            }
          )}
        >
          {"Headline here"}
        </div>
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__g5EWz)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__u3GYq
          )}
        >
          {"Sub headline here"}
        </div>
      </div>

      <div
        className={classNames(projectcss.all, sty.freeBox__vEMfe, {
          [sty.freeBox__whitecard__vEMfe3UHbK]: hasVariant(
            variants,
            "whitecard",
            "whitecard"
          )
        })}
      />

      <div className={classNames(projectcss.all, sty.freeBox__pzG9)}>
        <PlusRoundIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          role={"img"}
        />
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBannerCarouselItem__ArgProps,
      internalVariantPropNames: PlasmicBannerCarouselItem__VariantProps
    });

    return PlasmicBannerCarouselItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBannerCarouselItem";
  } else {
    func.displayName = `PlasmicBannerCarouselItem.${nodeName}`;
  }
  return func;
}

export const PlasmicBannerCarouselItem = Object.assign(
  // Top-level PlasmicBannerCarouselItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicBannerCarouselItem
    internalVariantProps: PlasmicBannerCarouselItem__VariantProps,
    internalArgProps: PlasmicBannerCarouselItem__ArgProps
  }
);

export default PlasmicBannerCarouselItem;
/* prettier-ignore-end */
