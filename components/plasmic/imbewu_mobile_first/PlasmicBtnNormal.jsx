// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3ekFgeJQEEmC58uuLfkDcf
// Component: xohdOATSWS
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_imbewu_mobile_first.module.css"; // plasmic-import: 3ekFgeJQEEmC58uuLfkDcf/projectcss
import sty from "./PlasmicBtnNormal.module.css"; // plasmic-import: xohdOATSWS/css
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: b4TKWwyCPY/icon
import Svgexport6SvgIcon from "./icons/PlasmicIcon__Svgexport6Svg"; // plasmic-import: gGo6J3FTUc/icon

export const PlasmicBtnNormal__VariantProps = new Array(
  "ghostGreen",
  "ghostWhite",
  "loading",
  "disabled",
  "btnState"
);

export const PlasmicBtnNormal__ArgProps = new Array("children");

function PlasmicBtnNormal__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.root__btnState_active]: hasVariant(
            variants,
            "btnState",
            "active"
          ),

          [sty.root__btnState_disabled]: hasVariant(
            variants,
            "btnState",
            "disabled"
          ),

          [sty.root__btnState_loading]: hasVariant(
            variants,
            "btnState",
            "loading"
          ),

          [sty.root__btnState_success]: hasVariant(
            variants,
            "btnState",
            "success"
          ),

          [sty.root__disabled]: hasVariant(variants, "disabled", "disabled"),
          [sty.root__ghostGreen]: hasVariant(
            variants,
            "ghostGreen",
            "ghostGreen"
          ),

          [sty.root__ghostWhite]: hasVariant(
            variants,
            "ghostWhite",
            "ghostWhite"
          ),

          [sty.root__loading]: hasVariant(variants, "loading", "loading")
        }
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: "click here",
        value: args.children,
        className: classNames(sty.slotTargetChildren, {
          [sty.slotTargetChildren__btnState_loading]: hasVariant(
            variants,
            "btnState",
            "loading"
          ),

          [sty.slotTargetChildren__btnState_success]: hasVariant(
            variants,
            "btnState",
            "success"
          ),

          [sty.slotTargetChildren__disabled]: hasVariant(
            variants,
            "disabled",
            "disabled"
          ),

          [sty.slotTargetChildren__ghostGreen]: hasVariant(
            variants,
            "ghostGreen",
            "ghostGreen"
          ),

          [sty.slotTargetChildren__loading]: hasVariant(
            variants,
            "loading",
            "loading"
          )
        })
      })}

      {(hasVariant(variants, "btnState", "success") ? true : false) ? (
        <Icon21Icon
          className={classNames(projectcss.all, sty.svg__tji7G, {
            [sty.svg__btnState_success__tji7GAeDv]: hasVariant(
              variants,
              "btnState",
              "success"
            )
          })}
          role={"img"}
        />
      ) : null}
      {(hasVariant(variants, "loading", "loading") ? true : false) ? (
        <Svgexport6SvgIcon
          className={classNames(projectcss.all, sty.svg___2Yyf0, {
            [sty.svg__loading___2Yyf0Xrubq]: hasVariant(
              variants,
              "loading",
              "loading"
            )
          })}
          role={"img"}
        />
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBtnNormal__ArgProps,
      internalVariantPropNames: PlasmicBtnNormal__VariantProps
    });

    return PlasmicBtnNormal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBtnNormal";
  } else {
    func.displayName = `PlasmicBtnNormal.${nodeName}`;
  }
  return func;
}

export const PlasmicBtnNormal = Object.assign(
  // Top-level PlasmicBtnNormal renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicBtnNormal
    internalVariantProps: PlasmicBtnNormal__VariantProps,
    internalArgProps: PlasmicBtnNormal__ArgProps
  }
);

export default PlasmicBtnNormal;
/* prettier-ignore-end */
