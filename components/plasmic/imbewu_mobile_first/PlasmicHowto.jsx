// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3ekFgeJQEEmC58uuLfkDcf
// Component: Kilmn3s6Jjc
import * as React from "react";
import Head from "next/head";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import NavPageTitle from "../../NavPageTitle"; // plasmic-import: _bfo_NMVKD/component
import CardHowtoSliderCarousel from "../../CardHowtoSliderCarousel"; // plasmic-import: oF81_IzDF6T/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_imbewu_mobile_first.module.css"; // plasmic-import: 3ekFgeJQEEmC58uuLfkDcf/projectcss
import sty from "./PlasmicHowto.module.css"; // plasmic-import: Kilmn3s6Jjc/css

export const PlasmicHowto__VariantProps = new Array();

export const PlasmicHowto__ArgProps = new Array();

function PlasmicHowto__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__aT2Tm)}>
            <NavPageTitle
              data-plasmic-name={"navPageTitle"}
              data-plasmic-override={overrides.navPageTitle}
              className={classNames("__wab_instance", sty.navPageTitle)}
              pageTitle={
                <div
                  data-plasmic-name={"pageTitle"}
                  data-plasmic-override={overrides.pageTitle}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.pageTitle
                  )}
                >
                  {"How To "}
                </div>
              }
            />

            <div
              data-plasmic-name={"outer"}
              data-plasmic-override={overrides.outer}
              className={classNames(projectcss.all, sty.outer)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__qxU1T)}>
                <CardHowtoSliderCarousel
                  data-plasmic-name={"cardHowtoSliderCarousel"}
                  data-plasmic-override={overrides.cardHowtoSliderCarousel}
                  className={classNames(
                    "__wab_instance",
                    sty.cardHowtoSliderCarousel
                  )}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navPageTitle",
    "pageTitle",
    "outer",
    "cardHowtoSliderCarousel"
  ],

  navPageTitle: ["navPageTitle", "pageTitle"],
  pageTitle: ["pageTitle"],
  outer: ["outer", "cardHowtoSliderCarousel"],
  cardHowtoSliderCarousel: ["cardHowtoSliderCarousel"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHowto__ArgProps,
      internalVariantPropNames: PlasmicHowto__VariantProps
    });

    return PlasmicHowto__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHowto";
  } else {
    func.displayName = `PlasmicHowto.${nodeName}`;
  }
  return func;
}

export const PlasmicHowto = Object.assign(
  // Top-level PlasmicHowto renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navPageTitle: makeNodeComponent("navPageTitle"),
    pageTitle: makeNodeComponent("pageTitle"),
    outer: makeNodeComponent("outer"),
    cardHowtoSliderCarousel: makeNodeComponent("cardHowtoSliderCarousel"),
    // Metadata about props expected for PlasmicHowto
    internalVariantProps: PlasmicHowto__VariantProps,
    internalArgProps: PlasmicHowto__ArgProps
  }
);

export default PlasmicHowto;
/* prettier-ignore-end */
