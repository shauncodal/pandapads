// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3ekFgeJQEEmC58uuLfkDcf
// Component: KfIhdDVBvn
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import InputString from "../../InputString"; // plasmic-import: 2PE7XZXJlW/component
import InputSelect from "../../InputSelect"; // plasmic-import: YM3rXZh8M9/component
import CellNumber from "../../CellNumber"; // plasmic-import: SHNeWqmgCt/component
import InputPassword from "../../InputPassword"; // plasmic-import: CA4YIAqpc5/component
import Checkbox from "../../Checkbox"; // plasmic-import: 5oaBcIxUW9H/component
import InputCheckBox from "../../InputCheckBox"; // plasmic-import: g-qG61Qikz/component
import BtnNormal from "../../BtnNormal"; // plasmic-import: xohdOATSWS/component
import BtnReadMore from "../../BtnReadMore"; // plasmic-import: nCdhjhK5Fp/component
import FooterWidget from "../../FooterWidget"; // plasmic-import: kn0Z3MZd2G/component
import { useScreenVariants as useScreenVariantstPLuZHt02V } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: tPLuZHt02v/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_imbewu_mobile_first.module.css"; // plasmic-import: 3ekFgeJQEEmC58uuLfkDcf/projectcss
import sty from "./PlasmicRegistration.module.css"; // plasmic-import: KfIhdDVBvn/css
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: qPUMSSqiY7/icon

export const PlasmicRegistration__VariantProps = new Array();

export const PlasmicRegistration__ArgProps = new Array();

function PlasmicRegistration__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantstPLuZHt02V()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__g2K4K)}>
            <div
              data-plasmic-name={"outer"}
              data-plasmic-override={overrides.outer}
              className={classNames(projectcss.all, sty.outer)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__qxbap)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__mplgn)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gBrW9
                    )}
                  >
                    {"Please Register"}
                  </div>

                  <InputString
                    data-plasmic-name={"inputFirstName"}
                    data-plasmic-override={overrides.inputFirstName}
                    className={classNames("__wab_instance", sty.inputFirstName)}
                  />

                  <InputString
                    data-plasmic-name={"inputLastName"}
                    data-plasmic-override={overrides.inputLastName}
                    className={classNames("__wab_instance", sty.inputLastName)}
                  />

                  {true ? (
                    <InputSelect
                      data-plasmic-name={"inputGender"}
                      data-plasmic-override={overrides.inputGender}
                      className={classNames("__wab_instance", sty.inputGender)}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1CVDb
                    )}
                  >
                    {"SA Cell Number"}
                  </div>

                  <CellNumber
                    data-plasmic-name={"inputCell"}
                    data-plasmic-override={overrides.inputCell}
                    className={classNames("__wab_instance", sty.inputCell)}
                  />

                  <InputString
                    data-plasmic-name={"inputEmail"}
                    data-plasmic-override={overrides.inputEmail}
                    className={classNames("__wab_instance", sty.inputEmail)}
                  />

                  <InputString
                    data-plasmic-name={"inputSaId"}
                    data-plasmic-override={overrides.inputSaId}
                    className={classNames("__wab_instance", sty.inputSaId)}
                  />

                  <InputPassword
                    data-plasmic-name={"inputPassword"}
                    data-plasmic-override={overrides.inputPassword}
                    className={classNames("__wab_instance", sty.inputPassword)}
                  />

                  <InputPassword
                    data-plasmic-name={"inputConfirm"}
                    data-plasmic-override={overrides.inputConfirm}
                    className={classNames("__wab_instance", sty.inputConfirm)}
                  />

                  <Checkbox
                    data-plasmic-name={"checkBoxMarketing"}
                    data-plasmic-override={overrides.checkBoxMarketing}
                    className={classNames(
                      "__wab_instance",
                      sty.checkBoxMarketing
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__i8KW3
                      )}
                    >
                      {
                        "Do you agree to receive marketing and  other related materials from Imbewu Stokvest?"
                      }
                    </div>
                  </Checkbox>

                  <InputCheckBox
                    data-plasmic-name={"terms"}
                    data-plasmic-override={overrides.terms}
                    className={classNames("__wab_instance", sty.terms)}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__c5299)}
                  >
                    <BtnNormal
                      data-plasmic-name={"submitBtn"}
                      data-plasmic-override={overrides.submitBtn}
                      className={classNames("__wab_instance", sty.submitBtn)}
                    >
                      <button
                        data-plasmic-name={"submitBtn2"}
                        data-plasmic-override={overrides.submitBtn2}
                        className={classNames(
                          projectcss.button,
                          projectcss.__wab_text,
                          sty.submitBtn2
                        )}
                      >
                        {"REgister"}
                      </button>
                    </BtnNormal>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__t8Bav)}
                  >
                    <BtnNormal
                      data-plasmic-name={"backBtn"}
                      data-plasmic-override={overrides.backBtn}
                      className={classNames("__wab_instance", sty.backBtn)}
                      ghostGreen={true}
                    >
                      <button
                        data-plasmic-name={"submitBtn4"}
                        data-plasmic-override={overrides.submitBtn4}
                        className={classNames(
                          projectcss.button,
                          projectcss.__wab_text,
                          sty.submitBtn4
                        )}
                      >
                        {"GO BACK "}
                      </button>
                    </BtnNormal>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__ncXij)}
                  >
                    <BtnReadMore
                      data-plasmic-name={"forgotBtn"}
                      data-plasmic-override={overrides.forgotBtn}
                      className={classNames("__wab_instance", sty.forgotBtn)}
                      slot={
                        <Icon12Icon
                          data-plasmic-name={"svg"}
                          data-plasmic-override={overrides.svg}
                          className={classNames(projectcss.all, sty.svg)}
                          role={"img"}
                        />
                      }
                    >
                      {"Need Help"}
                    </BtnReadMore>
                  </div>
                </p.Stack>
              </div>
            </div>

            <FooterWidget
              data-plasmic-name={"footerWidget"}
              data-plasmic-override={overrides.footerWidget}
              className={classNames("__wab_instance", sty.footerWidget)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "outer",
    "inputFirstName",
    "inputLastName",
    "inputGender",
    "inputCell",
    "inputEmail",
    "inputSaId",
    "inputPassword",
    "inputConfirm",
    "checkBoxMarketing",
    "terms",
    "submitBtn",
    "submitBtn2",
    "backBtn",
    "submitBtn4",
    "forgotBtn",
    "svg",
    "footerWidget"
  ],

  outer: [
    "outer",
    "inputFirstName",
    "inputLastName",
    "inputGender",
    "inputCell",
    "inputEmail",
    "inputSaId",
    "inputPassword",
    "inputConfirm",
    "checkBoxMarketing",
    "terms",
    "submitBtn",
    "submitBtn2",
    "backBtn",
    "submitBtn4",
    "forgotBtn",
    "svg"
  ],

  inputFirstName: ["inputFirstName"],
  inputLastName: ["inputLastName"],
  inputGender: ["inputGender"],
  inputCell: ["inputCell"],
  inputEmail: ["inputEmail"],
  inputSaId: ["inputSaId"],
  inputPassword: ["inputPassword"],
  inputConfirm: ["inputConfirm"],
  checkBoxMarketing: ["checkBoxMarketing"],
  terms: ["terms"],
  submitBtn: ["submitBtn", "submitBtn2"],
  submitBtn2: ["submitBtn2"],
  backBtn: ["backBtn", "submitBtn4"],
  submitBtn4: ["submitBtn4"],
  forgotBtn: ["forgotBtn", "svg"],
  svg: ["svg"],
  footerWidget: ["footerWidget"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicRegistration__ArgProps,
      internalVariantPropNames: PlasmicRegistration__VariantProps
    });

    return PlasmicRegistration__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRegistration";
  } else {
    func.displayName = `PlasmicRegistration.${nodeName}`;
  }
  return func;
}

export const PlasmicRegistration = Object.assign(
  // Top-level PlasmicRegistration renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    outer: makeNodeComponent("outer"),
    inputFirstName: makeNodeComponent("inputFirstName"),
    inputLastName: makeNodeComponent("inputLastName"),
    inputGender: makeNodeComponent("inputGender"),
    inputCell: makeNodeComponent("inputCell"),
    inputEmail: makeNodeComponent("inputEmail"),
    inputSaId: makeNodeComponent("inputSaId"),
    inputPassword: makeNodeComponent("inputPassword"),
    inputConfirm: makeNodeComponent("inputConfirm"),
    checkBoxMarketing: makeNodeComponent("checkBoxMarketing"),
    terms: makeNodeComponent("terms"),
    submitBtn: makeNodeComponent("submitBtn"),
    submitBtn2: makeNodeComponent("submitBtn2"),
    backBtn: makeNodeComponent("backBtn"),
    submitBtn4: makeNodeComponent("submitBtn4"),
    forgotBtn: makeNodeComponent("forgotBtn"),
    svg: makeNodeComponent("svg"),
    footerWidget: makeNodeComponent("footerWidget"),
    // Metadata about props expected for PlasmicRegistration
    internalVariantProps: PlasmicRegistration__VariantProps,
    internalArgProps: PlasmicRegistration__ArgProps
  }
);

export default PlasmicRegistration;
/* prettier-ignore-end */
