// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3ekFgeJQEEmC58uuLfkDcf
// Component: s0OGlPGQ4i
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import NavPageTitle from "../../NavPageTitle"; // plasmic-import: _bfo_NMVKD/component
import CellNumber from "../../CellNumber"; // plasmic-import: SHNeWqmgCt/component
import BtnNormal from "../../BtnNormal"; // plasmic-import: xohdOATSWS/component
import FooterWidget from "../../FooterWidget"; // plasmic-import: kn0Z3MZd2G/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_imbewu_mobile_first.module.css"; // plasmic-import: 3ekFgeJQEEmC58uuLfkDcf/projectcss
import sty from "./PlasmicForgottenPasssword.module.css"; // plasmic-import: s0OGlPGQ4i/css

export const PlasmicForgottenPasssword__VariantProps = new Array();

export const PlasmicForgottenPasssword__ArgProps = new Array();

function PlasmicForgottenPasssword__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__snE2)}>
            <NavPageTitle
              data-plasmic-name={"navPageTitle"}
              data-plasmic-override={overrides.navPageTitle}
              className={classNames("__wab_instance", sty.navPageTitle)}
              pageTitle={
                <div
                  data-plasmic-name={"pageTitle"}
                  data-plasmic-override={overrides.pageTitle}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.pageTitle
                  )}
                >
                  {"Forgotten Password"}
                </div>
              }
            />

            <div
              data-plasmic-name={"outer"}
              data-plasmic-override={overrides.outer}
              className={classNames(projectcss.all, sty.outer)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__deGc)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__swxr0)}
                >
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"Forgotten Password"}
                  </div>

                  <CellNumber
                    data-plasmic-name={"cellNumber"}
                    data-plasmic-override={overrides.cellNumber}
                    className={classNames("__wab_instance", sty.cellNumber)}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__aZnnL)}
                  >
                    <BtnNormal
                      data-plasmic-name={"submitBtn"}
                      data-plasmic-override={overrides.submitBtn}
                      className={classNames("__wab_instance", sty.submitBtn)}
                    >
                      <button
                        data-plasmic-name={"submitBtn2"}
                        data-plasmic-override={overrides.submitBtn2}
                        className={classNames(
                          projectcss.button,
                          projectcss.__wab_text,
                          sty.submitBtn2
                        )}
                      >
                        {"submit"}
                      </button>
                    </BtnNormal>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox___6MePj)}
                  >
                    <BtnNormal
                      data-plasmic-name={"btnBack"}
                      data-plasmic-override={overrides.btnBack}
                      className={classNames("__wab_instance", sty.btnBack)}
                      ghostGreen={true}
                    >
                      <button
                        data-plasmic-name={"submitBtn4"}
                        data-plasmic-override={overrides.submitBtn4}
                        className={classNames(
                          projectcss.button,
                          projectcss.__wab_text,
                          sty.submitBtn4
                        )}
                      >
                        {"BACK"}
                      </button>
                    </BtnNormal>
                  </div>
                </p.Stack>
              </p.Stack>
            </div>

            <FooterWidget
              data-plasmic-name={"footerWidget"}
              data-plasmic-override={overrides.footerWidget}
              className={classNames("__wab_instance", sty.footerWidget)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navPageTitle",
    "pageTitle",
    "outer",
    "text",
    "cellNumber",
    "submitBtn",
    "submitBtn2",
    "btnBack",
    "submitBtn4",
    "footerWidget"
  ],

  navPageTitle: ["navPageTitle", "pageTitle"],
  pageTitle: ["pageTitle"],
  outer: [
    "outer",
    "text",
    "cellNumber",
    "submitBtn",
    "submitBtn2",
    "btnBack",
    "submitBtn4"
  ],

  text: ["text"],
  cellNumber: ["cellNumber"],
  submitBtn: ["submitBtn", "submitBtn2"],
  submitBtn2: ["submitBtn2"],
  btnBack: ["btnBack", "submitBtn4"],
  submitBtn4: ["submitBtn4"],
  footerWidget: ["footerWidget"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicForgottenPasssword__ArgProps,
      internalVariantPropNames: PlasmicForgottenPasssword__VariantProps
    });

    return PlasmicForgottenPasssword__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicForgottenPasssword";
  } else {
    func.displayName = `PlasmicForgottenPasssword.${nodeName}`;
  }
  return func;
}

export const PlasmicForgottenPasssword = Object.assign(
  // Top-level PlasmicForgottenPasssword renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navPageTitle: makeNodeComponent("navPageTitle"),
    pageTitle: makeNodeComponent("pageTitle"),
    outer: makeNodeComponent("outer"),
    text: makeNodeComponent("text"),
    cellNumber: makeNodeComponent("cellNumber"),
    submitBtn: makeNodeComponent("submitBtn"),
    submitBtn2: makeNodeComponent("submitBtn2"),
    btnBack: makeNodeComponent("btnBack"),
    submitBtn4: makeNodeComponent("submitBtn4"),
    footerWidget: makeNodeComponent("footerWidget"),
    // Metadata about props expected for PlasmicForgottenPasssword
    internalVariantProps: PlasmicForgottenPasssword__VariantProps,
    internalArgProps: PlasmicForgottenPasssword__ArgProps
  }
);

export default PlasmicForgottenPasssword;
/* prettier-ignore-end */
