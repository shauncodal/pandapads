// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3ekFgeJQEEmC58uuLfkDcf
// Component: 6HXoSsrypS4
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CardPlanItem from "../../CardPlanItem"; // plasmic-import: -IL9bbb6JZ/component
import { useScreenVariants as useScreenVariantstPLuZHt02V } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: tPLuZHt02v/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_imbewu_mobile_first.module.css"; // plasmic-import: 3ekFgeJQEEmC58uuLfkDcf/projectcss
import sty from "./PlasmicCardPricingSliderCarousel.module.css"; // plasmic-import: 6HXoSsrypS4/css

export const PlasmicCardPricingSliderCarousel__VariantProps = new Array();

export const PlasmicCardPricingSliderCarousel__ArgProps = new Array();

function PlasmicCardPricingSliderCarousel__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantstPLuZHt02V()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"planHolder"}
        data-plasmic-override={overrides.planHolder}
        hasGap={true}
        className={classNames(projectcss.all, sty.planHolder)}
      >
        <CardPlanItem
          className={classNames("__wab_instance", sty.cardPlanItem__k75Xz)}
        />

        <CardPlanItem
          className={classNames("__wab_instance", sty.cardPlanItem__cgcxX)}
        />

        {(hasVariant(globalVariants, "screen", "smallMobile") ? true : true) ? (
          <CardPlanItem
            className={classNames("__wab_instance", sty.cardPlanItem___9BhfV)}
          />
        ) : null}
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "planHolder"],
  planHolder: ["planHolder"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardPricingSliderCarousel__ArgProps,
      internalVariantPropNames: PlasmicCardPricingSliderCarousel__VariantProps
    });

    return PlasmicCardPricingSliderCarousel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardPricingSliderCarousel";
  } else {
    func.displayName = `PlasmicCardPricingSliderCarousel.${nodeName}`;
  }
  return func;
}

export const PlasmicCardPricingSliderCarousel = Object.assign(
  // Top-level PlasmicCardPricingSliderCarousel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    planHolder: makeNodeComponent("planHolder"),
    // Metadata about props expected for PlasmicCardPricingSliderCarousel
    internalVariantProps: PlasmicCardPricingSliderCarousel__VariantProps,
    internalArgProps: PlasmicCardPricingSliderCarousel__ArgProps
  }
);

export default PlasmicCardPricingSliderCarousel;
/* prettier-ignore-end */
