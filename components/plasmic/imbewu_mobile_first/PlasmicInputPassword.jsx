// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3ekFgeJQEEmC58uuLfkDcf
// Component: CA4YIAqpc5
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_imbewu_mobile_first.module.css"; // plasmic-import: 3ekFgeJQEEmC58uuLfkDcf/projectcss
import sty from "./PlasmicInputPassword.module.css"; // plasmic-import: CA4YIAqpc5/css
import Icon24Icon from "./icons/PlasmicIcon__Icon24"; // plasmic-import: 0OAbHkOsf1/icon
import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: eL1sBqaiS/icon
import Icon25Icon from "./icons/PlasmicIcon__Icon25"; // plasmic-import: JYqxc_I_6x/icon

export const PlasmicInputPassword__VariantProps = new Array(
  "showPassword",
  "showError"
);

export const PlasmicInputPassword__ArgProps = new Array();

function PlasmicInputPassword__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__xv6Kg)}>
        <div className={classNames(projectcss.all, sty.freeBox___25FNd)}>
          <input
            data-plasmic-name={"txtValue"}
            data-plasmic-override={overrides.txtValue}
            className={classNames(projectcss.input, sty.txtValue, {
              [sty.txtValue__showPassword]: hasVariant(
                variants,
                "showPassword",
                "showPassword"
              )
            })}
            placeholder={"Password"}
            size={1}
            type={
              hasVariant(variants, "showPassword", "showPassword")
                ? "text"
                : "password"
            }
            value={""}
          />

          {(
            hasVariant(variants, "showPassword", "showPassword") ? true : false
          ) ? (
            <Icon24Icon
              data-plasmic-name={"btnEyeClosed"}
              data-plasmic-override={overrides.btnEyeClosed}
              className={classNames(projectcss.all, sty.btnEyeClosed, {
                [sty.btnEyeClosed__showPassword]: hasVariant(
                  variants,
                  "showPassword",
                  "showPassword"
                )
              })}
              role={"img"}
            />
          ) : null}
          {(
            hasVariant(variants, "showPassword", "showPassword") ? true : true
          ) ? (
            <Icon23Icon
              data-plasmic-name={"btnEye"}
              data-plasmic-override={overrides.btnEye}
              className={classNames(projectcss.all, sty.btnEye, {
                [sty.btnEye__showError]: hasVariant(
                  variants,
                  "showError",
                  "showError"
                ),

                [sty.btnEye__showPassword]: hasVariant(
                  variants,
                  "showPassword",
                  "showPassword"
                )
              })}
              role={"img"}
            />
          ) : null}
        </div>

        {(hasVariant(variants, "showError", "showError") ? true : true) ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__rt75H, {
              [sty.freeBox__showError__rt75H6Q7Pf]: hasVariant(
                variants,
                "showError",
                "showError"
              )
            })}
          >
            <Icon25Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />

            <div
              data-plasmic-name={"txtError"}
              data-plasmic-override={overrides.txtError}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.txtError,
                {
                  [sty.txtError__showError]: hasVariant(
                    variants,
                    "showError",
                    "showError"
                  )
                }
              )}
            >
              {"Enter some text"}
            </div>
          </p.Stack>
        ) : null}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "txtValue", "btnEyeClosed", "btnEye", "svg", "txtError"],
  txtValue: ["txtValue"],
  btnEyeClosed: ["btnEyeClosed"],
  btnEye: ["btnEye"],
  svg: ["svg"],
  txtError: ["txtError"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputPassword__ArgProps,
      internalVariantPropNames: PlasmicInputPassword__VariantProps
    });

    return PlasmicInputPassword__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputPassword";
  } else {
    func.displayName = `PlasmicInputPassword.${nodeName}`;
  }
  return func;
}

export const PlasmicInputPassword = Object.assign(
  // Top-level PlasmicInputPassword renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    txtValue: makeNodeComponent("txtValue"),
    btnEyeClosed: makeNodeComponent("btnEyeClosed"),
    btnEye: makeNodeComponent("btnEye"),
    svg: makeNodeComponent("svg"),
    txtError: makeNodeComponent("txtError"),
    // Metadata about props expected for PlasmicInputPassword
    internalVariantProps: PlasmicInputPassword__VariantProps,
    internalArgProps: PlasmicInputPassword__ArgProps
  }
);

export default PlasmicInputPassword;
/* prettier-ignore-end */
