// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3ekFgeJQEEmC58uuLfkDcf
// Component: GAUiliHDE3
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_imbewu_mobile_first.module.css"; // plasmic-import: 3ekFgeJQEEmC58uuLfkDcf/projectcss
import sty from "./PlasmicMenuBtn.module.css"; // plasmic-import: GAUiliHDE3/css
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: NUWqJWAoic_/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: kAEsPJHqHt/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: W89TMRABzY/icon

export const PlasmicMenuBtn__VariantProps = new Array("close");

export const PlasmicMenuBtn__ArgProps = new Array();

function PlasmicMenuBtn__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={p.PlasmicLink}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_tokens,
        sty.root
      )}
      component={Link}
      platform={"nextjs"}
    >
      {false ? (
        <IconIcon
          className={classNames(projectcss.all, sty.svg__dIde7)}
          role={"img"}
        />
      ) : null}
      {false ? (
        <IconIcon
          className={classNames(projectcss.all, sty.svg__zdcOq)}
          role={"img"}
        />
      ) : null}

      <p.PlasmicIcon
        PlasmicIconType={
          hasVariant(variants, "close", "close") ? Icon8Icon : Icon7Icon
        }
        className={classNames(projectcss.all, sty.svg__naPvt, {
          [sty.svg__close__naPvtFea6H]: hasVariant(variants, "close", "close")
        })}
        role={"img"}
      />
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMenuBtn__ArgProps,
      internalVariantPropNames: PlasmicMenuBtn__VariantProps
    });

    return PlasmicMenuBtn__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMenuBtn";
  } else {
    func.displayName = `PlasmicMenuBtn.${nodeName}`;
  }
  return func;
}

export const PlasmicMenuBtn = Object.assign(
  // Top-level PlasmicMenuBtn renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicMenuBtn
    internalVariantProps: PlasmicMenuBtn__VariantProps,
    internalArgProps: PlasmicMenuBtn__ArgProps
  }
);

export default PlasmicMenuBtn;
/* prettier-ignore-end */
