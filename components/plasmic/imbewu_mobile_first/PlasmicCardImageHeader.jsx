// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3ekFgeJQEEmC58uuLfkDcf
// Component: LHElhf6Fym
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import BtnNormal from "../../BtnNormal"; // plasmic-import: xohdOATSWS/component
import { useScreenVariants as useScreenVariantstPLuZHt02V } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: tPLuZHt02v/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_imbewu_mobile_first.module.css"; // plasmic-import: 3ekFgeJQEEmC58uuLfkDcf/projectcss
import sty from "./PlasmicCardImageHeader.module.css"; // plasmic-import: LHElhf6Fym/css
import PlusRoundIcon from "./icons/PlasmicIcon__PlusRound"; // plasmic-import: oNedDfWT7/icon

export const PlasmicCardImageHeader__VariantProps = new Array();

export const PlasmicCardImageHeader__ArgProps = new Array("children");

function PlasmicCardImageHeader__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantstPLuZHt02V()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__vZlml)}>
        <div className={classNames(projectcss.all, sty.freeBox__ke4L)} />

        <div className={classNames(projectcss.all, sty.freeBox__e4GGe)}>
          <p.PlasmicIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            PlasmicIconType={
              hasVariant(globalVariants, "screen", "desktopOnly")
                ? PlusRoundIcon
                : hasVariant(globalVariants, "screen", "mobile")
                ? PlusRoundIcon
                : PlusRoundIcon
            }
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </div>
      </div>

      <div className={classNames(projectcss.all, sty.freeBox___2SVwq)}>
        <div className={classNames(projectcss.all, sty.freeBox__f2QSh)}>
          <div className={classNames(projectcss.all, sty.freeBox___3GXb)}>
            {p.renderPlasmicSlot({
              defaultContents: "Headline here",
              value: args.children,
              className: classNames(sty.slotTargetChildren)
            })}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox___7Mp9T)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__x842T
              )}
            >
              {hasVariant(globalVariants, "screen", "desktopOnly")
                ? "Sub headline here"
                : hasVariant(globalVariants, "screen", "mobile")
                ? "Sub headline here"
                : "Sub headline here"}
            </div>
          </div>
        </div>
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__zyMa)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__z4TH
          )}
        >
          {
            "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut ero labore et dolore."
          }
        </div>
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__jPHmp)}>
        <BtnNormal
          data-plasmic-name={"btnNormal"}
          data-plasmic-override={overrides.btnNormal}
          className={classNames("__wab_instance", sty.btnNormal)}
        />
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "svg", "btnNormal"],
  svg: ["svg"],
  btnNormal: ["btnNormal"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardImageHeader__ArgProps,
      internalVariantPropNames: PlasmicCardImageHeader__VariantProps
    });

    return PlasmicCardImageHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardImageHeader";
  } else {
    func.displayName = `PlasmicCardImageHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicCardImageHeader = Object.assign(
  // Top-level PlasmicCardImageHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    btnNormal: makeNodeComponent("btnNormal"),
    // Metadata about props expected for PlasmicCardImageHeader
    internalVariantProps: PlasmicCardImageHeader__VariantProps,
    internalArgProps: PlasmicCardImageHeader__ArgProps
  }
);

export default PlasmicCardImageHeader;
/* prettier-ignore-end */
