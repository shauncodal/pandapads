// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3ekFgeJQEEmC58uuLfkDcf
// Component: kn0Z3MZd2G
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_imbewu_mobile_first.module.css"; // plasmic-import: 3ekFgeJQEEmC58uuLfkDcf/projectcss
import sty from "./PlasmicFooterWidget.module.css"; // plasmic-import: kn0Z3MZd2G/css
import LogoImbewuWhiteFinalsvgIcon from "./icons/PlasmicIcon__LogoImbewuWhiteFinalsvg"; // plasmic-import: i8vEAYgrKq/icon

export const PlasmicFooterWidget__VariantProps = new Array();

export const PlasmicFooterWidget__ArgProps = new Array();

function PlasmicFooterWidget__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__v8Yn5)}
      >
        <p.PlasmicLink
          data-plasmic-name={"privacy"}
          data-plasmic-override={overrides.privacy}
          className={classNames(
            projectcss.a,
            projectcss.__wab_text,
            sty.privacy
          )}
          component={Link}
          platform={"nextjs"}
        >
          {"Privacy Policy "}
        </p.PlasmicLink>

        <p.PlasmicLink
          data-plasmic-name={"tandcs"}
          data-plasmic-override={overrides.tandcs}
          className={classNames(
            projectcss.a,
            projectcss.__wab_text,
            sty.tandcs
          )}
          component={Link}
          platform={"nextjs"}
        >
          {"Terms & conditions "}
        </p.PlasmicLink>

        <p.PlasmicLink
          data-plasmic-name={"contact"}
          data-plasmic-override={overrides.contact}
          className={classNames(
            projectcss.a,
            projectcss.__wab_text,
            sty.contact
          )}
          component={Link}
          platform={"nextjs"}
        >
          {"Contact Us"}
        </p.PlasmicLink>
      </p.Stack>

      <LogoImbewuWhiteFinalsvgIcon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg)}
        role={"img"}
      />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___1FSq)}
      >
        <div
          data-plasmic-name={"version"}
          data-plasmic-override={overrides.version}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.version
          )}
        >
          {"Version 1.004"}
        </div>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "privacy", "tandcs", "contact", "svg", "version"],
  privacy: ["privacy"],
  tandcs: ["tandcs"],
  contact: ["contact"],
  svg: ["svg"],
  version: ["version"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooterWidget__ArgProps,
      internalVariantPropNames: PlasmicFooterWidget__VariantProps
    });

    return PlasmicFooterWidget__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooterWidget";
  } else {
    func.displayName = `PlasmicFooterWidget.${nodeName}`;
  }
  return func;
}

export const PlasmicFooterWidget = Object.assign(
  // Top-level PlasmicFooterWidget renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    privacy: makeNodeComponent("privacy"),
    tandcs: makeNodeComponent("tandcs"),
    contact: makeNodeComponent("contact"),
    svg: makeNodeComponent("svg"),
    version: makeNodeComponent("version"),
    // Metadata about props expected for PlasmicFooterWidget
    internalVariantProps: PlasmicFooterWidget__VariantProps,
    internalArgProps: PlasmicFooterWidget__ArgProps
  }
);

export default PlasmicFooterWidget;
/* prettier-ignore-end */
