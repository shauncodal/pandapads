// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3ekFgeJQEEmC58uuLfkDcf
// Component: k9ppLUjiAw
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_imbewu_mobile_first.module.css"; // plasmic-import: 3ekFgeJQEEmC58uuLfkDcf/projectcss
import sty from "./PlasmicDotSliderItem.module.css"; // plasmic-import: k9ppLUjiAw/css

export const PlasmicDotSliderItem__VariantProps = new Array("currentSlide");

export const PlasmicDotSliderItem__ArgProps = new Array();

function PlasmicDotSliderItem__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const [isRootActive, triggerRootActiveProps] = useTrigger("usePressed", {});
  const triggers = {
    active_root: isRootActive
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.root__currentSlide]: hasVariant(
            variants,
            "currentSlide",
            "currentSlide"
          )
        }
      )}
      data-plasmic-trigger-props={[triggerRootActiveProps]}
    >
      {(
        triggers.active_root
          ? true
          : hasVariant(variants, "currentSlide", "currentSlide")
          ? true
          : true
      ) ? (
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBox__currentSlide]: hasVariant(
              variants,
              "currentSlide",
              "currentSlide"
            )
          })}
        />
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDotSliderItem__ArgProps,
      internalVariantPropNames: PlasmicDotSliderItem__VariantProps
    });

    return PlasmicDotSliderItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDotSliderItem";
  } else {
    func.displayName = `PlasmicDotSliderItem.${nodeName}`;
  }
  return func;
}

export const PlasmicDotSliderItem = Object.assign(
  // Top-level PlasmicDotSliderItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicDotSliderItem
    internalVariantProps: PlasmicDotSliderItem__VariantProps,
    internalArgProps: PlasmicDotSliderItem__ArgProps
  }
);

export default PlasmicDotSliderItem;
/* prettier-ignore-end */
