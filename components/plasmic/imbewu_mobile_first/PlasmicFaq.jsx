// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3ekFgeJQEEmC58uuLfkDcf
// Component: apiXpyyfjnS
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import NavPageTitle from "../../NavPageTitle"; // plasmic-import: _bfo_NMVKD/component
import IconRound from "../../IconRound"; // plasmic-import: fi0LamIfb0/component
import FooterWidget from "../../FooterWidget"; // plasmic-import: kn0Z3MZd2G/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_imbewu_mobile_first.module.css"; // plasmic-import: 3ekFgeJQEEmC58uuLfkDcf/projectcss
import sty from "./PlasmicFaq.module.css"; // plasmic-import: apiXpyyfjnS/css
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: RHqY8F8M2K/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: W89TMRABzY/icon

export const PlasmicFaq__VariantProps = new Array();

export const PlasmicFaq__ArgProps = new Array();

function PlasmicFaq__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__bmS5)}>
            <NavPageTitle
              data-plasmic-name={"navPageTitle"}
              data-plasmic-override={overrides.navPageTitle}
              className={classNames("__wab_instance", sty.navPageTitle)}
              pageTitle={
                <div
                  data-plasmic-name={"pageTitle"}
                  data-plasmic-override={overrides.pageTitle}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.pageTitle
                  )}
                >
                  {"Frequently Asked Questions"}
                </div>
              }
            />

            <div
              data-plasmic-name={"outer"}
              data-plasmic-override={overrides.outer}
              className={classNames(projectcss.all, sty.outer)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__ntN9G)}>
                <div className={classNames(projectcss.all, sty.freeBox__x3YZq)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pqLs
                    )}
                  >
                    {"Please enter your details"}
                  </div>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__w0Plx)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tjZHb
                      )}
                    >
                      {"Here the FAQ headline"}
                    </div>

                    <IconRound
                      className={classNames(
                        "__wab_instance",
                        sty.iconRound__eo1PR
                      )}
                      icon={
                        <Icon10Icon
                          className={classNames(projectcss.all, sty.svg__urzOy)}
                          role={"img"}
                        />
                      }
                    />
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__bqHsA)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rPyBy
                      )}
                    >
                      {"Here the FAQ headline"}
                    </div>

                    <IconRound
                      className={classNames(
                        "__wab_instance",
                        sty.iconRound__c7VkV
                      )}
                      icon={
                        <Icon8Icon
                          className={classNames(projectcss.all, sty.svg__hXRvt)}
                          role={"img"}
                        />
                      }
                      white={true}
                    />
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__azpcY)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___873S
                      )}
                    >
                      {
                        "Here the content related to the faq in the open toggle when clicked by the user.  Here the content related to the faq in the open toggle when clicked by the user."
                      }
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__tvGx)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pt0B2
                      )}
                    >
                      {"Here the FAQ headline"}
                    </div>

                    <IconRound
                      className={classNames(
                        "__wab_instance",
                        sty.iconRound__spxlo
                      )}
                      icon={
                        <Icon10Icon
                          className={classNames(projectcss.all, sty.svg__ms6Op)}
                          role={"img"}
                        />
                      }
                    />
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__hbkuA)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__looGk
                      )}
                    >
                      {"Here the FAQ headline"}
                    </div>

                    <IconRound
                      className={classNames(
                        "__wab_instance",
                        sty.iconRound__dfEif
                      )}
                      icon={
                        <Icon10Icon
                          className={classNames(projectcss.all, sty.svg__rPsoE)}
                          role={"img"}
                        />
                      }
                    />
                  </p.Stack>
                </div>
              </div>
            </div>
          </div>

          <FooterWidget
            data-plasmic-name={"footerWidget"}
            data-plasmic-override={overrides.footerWidget}
            className={classNames("__wab_instance", sty.footerWidget)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "navPageTitle", "pageTitle", "outer", "footerWidget"],
  navPageTitle: ["navPageTitle", "pageTitle"],
  pageTitle: ["pageTitle"],
  outer: ["outer"],
  footerWidget: ["footerWidget"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFaq__ArgProps,
      internalVariantPropNames: PlasmicFaq__VariantProps
    });

    return PlasmicFaq__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFaq";
  } else {
    func.displayName = `PlasmicFaq.${nodeName}`;
  }
  return func;
}

export const PlasmicFaq = Object.assign(
  // Top-level PlasmicFaq renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navPageTitle: makeNodeComponent("navPageTitle"),
    pageTitle: makeNodeComponent("pageTitle"),
    outer: makeNodeComponent("outer"),
    footerWidget: makeNodeComponent("footerWidget"),
    // Metadata about props expected for PlasmicFaq
    internalVariantProps: PlasmicFaq__VariantProps,
    internalArgProps: PlasmicFaq__ArgProps
  }
);

export default PlasmicFaq;
/* prettier-ignore-end */
