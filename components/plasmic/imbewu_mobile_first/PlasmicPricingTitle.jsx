// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3ekFgeJQEEmC58uuLfkDcf
// Component: v13NC5cnD3
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantstPLuZHt02V } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: tPLuZHt02v/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_imbewu_mobile_first.module.css"; // plasmic-import: 3ekFgeJQEEmC58uuLfkDcf/projectcss
import sty from "./PlasmicPricingTitle.module.css"; // plasmic-import: v13NC5cnD3/css

export const PlasmicPricingTitle__VariantProps = new Array();

export const PlasmicPricingTitle__ArgProps = new Array();

function PlasmicPricingTitle__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantstPLuZHt02V()
  });

  return (hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__jsAtV
          )}
        >
          {hasVariant(globalVariants, "screen", "mobile")
            ? "Plan A"
            : "Enter some text"}
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__shThW
          )}
        >
          {hasVariant(globalVariants, "screen", "mobile")
            ? "Only R175 pm"
            : "Enter some text"}
        </div>
      ) : null}
    </div>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPricingTitle__ArgProps,
      internalVariantPropNames: PlasmicPricingTitle__VariantProps
    });

    return PlasmicPricingTitle__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPricingTitle";
  } else {
    func.displayName = `PlasmicPricingTitle.${nodeName}`;
  }
  return func;
}

export const PlasmicPricingTitle = Object.assign(
  // Top-level PlasmicPricingTitle renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicPricingTitle
    internalVariantProps: PlasmicPricingTitle__VariantProps,
    internalArgProps: PlasmicPricingTitle__ArgProps
  }
);

export default PlasmicPricingTitle;
/* prettier-ignore-end */
