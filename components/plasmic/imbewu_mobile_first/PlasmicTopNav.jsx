// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3ekFgeJQEEmC58uuLfkDcf
// Component: ZZGjZplJ6OV
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MenuBtn from "../../MenuBtn"; // plasmic-import: GAUiliHDE3/component
import { useScreenVariants as useScreenVariantstPLuZHt02V } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: tPLuZHt02v/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_imbewu_mobile_first.module.css"; // plasmic-import: 3ekFgeJQEEmC58uuLfkDcf/projectcss
import sty from "./PlasmicTopNav.module.css"; // plasmic-import: ZZGjZplJ6OV/css
import LogoImbewuWhiteFinalsvgIcon from "./icons/PlasmicIcon__LogoImbewuWhiteFinalsvg"; // plasmic-import: i8vEAYgrKq/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: pykZgng3gR/icon

export const PlasmicTopNav__VariantProps = new Array("menuOpen");

export const PlasmicTopNav__ArgProps = new Array();

function PlasmicTopNav__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantstPLuZHt02V()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.root__menuOpen]: hasVariant(variants, "menuOpen", "menuOpen") }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__jEiHy)}>
        <MenuBtn
          data-plasmic-name={"menuBtn"}
          data-plasmic-override={overrides.menuBtn}
          className={classNames("__wab_instance", sty.menuBtn, {
            [sty.menuBtn__menuOpen]: hasVariant(
              variants,
              "menuOpen",
              "menuOpen"
            )
          })}
          close={
            hasVariant(variants, "menuOpen", "menuOpen") ? true : undefined
          }
        />
      </div>

      <div className={classNames(projectcss.all, sty.freeBox___9343)}>
        <LogoImbewuWhiteFinalsvgIcon
          className={classNames(projectcss.all, sty.svg__gjZu3)}
          role={"img"}
        />
      </div>

      <div className={classNames(projectcss.all, sty.freeBox___1Fkld)}>
        <div className={classNames(projectcss.all, sty.freeBox__njzIh)}>
          <Icon9Icon
            className={classNames(projectcss.all, sty.svg__hmAr)}
            role={"img"}
          />
        </div>
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "menuBtn"],
  menuBtn: ["menuBtn"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTopNav__ArgProps,
      internalVariantPropNames: PlasmicTopNav__VariantProps
    });

    return PlasmicTopNav__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTopNav";
  } else {
    func.displayName = `PlasmicTopNav.${nodeName}`;
  }
  return func;
}

export const PlasmicTopNav = Object.assign(
  // Top-level PlasmicTopNav renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menuBtn: makeNodeComponent("menuBtn"),
    // Metadata about props expected for PlasmicTopNav
    internalVariantProps: PlasmicTopNav__VariantProps,
    internalArgProps: PlasmicTopNav__ArgProps
  }
);

export default PlasmicTopNav;
/* prettier-ignore-end */
