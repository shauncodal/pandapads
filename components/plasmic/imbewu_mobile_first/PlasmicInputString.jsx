// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3ekFgeJQEEmC58uuLfkDcf
// Component: 2PE7XZXJlW
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_imbewu_mobile_first.module.css"; // plasmic-import: 3ekFgeJQEEmC58uuLfkDcf/projectcss
import sty from "./PlasmicInputString.module.css"; // plasmic-import: 2PE7XZXJlW/css
import Icon25Icon from "./icons/PlasmicIcon__Icon25"; // plasmic-import: JYqxc_I_6x/icon

export const PlasmicInputString__VariantProps = new Array("showError");

export const PlasmicInputString__ArgProps = new Array();

function PlasmicInputString__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__pyCol)}>
        <input
          data-plasmic-name={"txtValue"}
          data-plasmic-override={overrides.txtValue}
          className={classNames(projectcss.input, sty.txtValue, {
            [sty.txtValue__showError]: hasVariant(
              variants,
              "showError",
              "showError"
            )
          })}
          placeholder={"Last Name"}
          size={1}
          type={"text"}
          value={""}
        />

        {(hasVariant(variants, "showError", "showError") ? true : true) ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__z0HfF, {
              [sty.freeBox__showError__z0HfFoDnBr]: hasVariant(
                variants,
                "showError",
                "showError"
              )
            })}
          >
            <Icon25Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />

            {(hasVariant(variants, "showError", "showError") ? true : true) ? (
              <div
                data-plasmic-name={"txtError"}
                data-plasmic-override={overrides.txtError}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.txtError,
                  {
                    [sty.txtError__showError]: hasVariant(
                      variants,
                      "showError",
                      "showError"
                    )
                  }
                )}
              >
                {"Error text"}
              </div>
            ) : null}
          </p.Stack>
        ) : null}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "txtValue", "svg", "txtError"],
  txtValue: ["txtValue"],
  svg: ["svg"],
  txtError: ["txtError"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputString__ArgProps,
      internalVariantPropNames: PlasmicInputString__VariantProps
    });

    return PlasmicInputString__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputString";
  } else {
    func.displayName = `PlasmicInputString.${nodeName}`;
  }
  return func;
}

export const PlasmicInputString = Object.assign(
  // Top-level PlasmicInputString renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    txtValue: makeNodeComponent("txtValue"),
    svg: makeNodeComponent("svg"),
    txtError: makeNodeComponent("txtError"),
    // Metadata about props expected for PlasmicInputString
    internalVariantProps: PlasmicInputString__VariantProps,
    internalArgProps: PlasmicInputString__ArgProps
  }
);

export default PlasmicInputString;
/* prettier-ignore-end */
