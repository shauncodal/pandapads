// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3ekFgeJQEEmC58uuLfkDcf
// Component: YCEjD890ktI
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import BtnFooterNavItem from "../../BtnFooterNavItem"; // plasmic-import: JEo6m_G5j0/component
import { useScreenVariants as useScreenVariantstPLuZHt02V } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: tPLuZHt02v/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_imbewu_mobile_first.module.css"; // plasmic-import: 3ekFgeJQEEmC58uuLfkDcf/projectcss
import sty from "./PlasmicMenu.module.css"; // plasmic-import: YCEjD890ktI/css
import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: Az-vBf3R-y/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: cW1a4I8kuy/icon
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: iLJqitKIIg/icon

export const PlasmicMenu__VariantProps = new Array();

export const PlasmicMenu__ArgProps = new Array();

function PlasmicMenu__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantstPLuZHt02V()
  });

  return (
    hasVariant(globalVariants, "screen", "smallMobile") ? true : false
  ) ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {(hasVariant(globalVariants, "screen", "smallMobile") ? true : false) ? (
        <BtnFooterNavItem
          data-plasmic-name={"btnFooterNavItem"}
          data-plasmic-override={overrides.btnFooterNavItem}
          className={classNames("__wab_instance", sty.btnFooterNavItem)}
        />
      ) : null}
      {(hasVariant(globalVariants, "screen", "smallMobile") ? true : false) ? (
        <p.PlasmicLink
          className={classNames(projectcss.a, sty.link__vDh6J)}
          component={Link}
          platform={"nextjs"}
        >
          {(
            hasVariant(globalVariants, "screen", "smallMobile") ? true : false
          ) ? (
            <div className={classNames(projectcss.all, sty.freeBox___60Zc)}>
              {(
                hasVariant(globalVariants, "screen", "smallMobile")
                  ? true
                  : false
              ) ? (
                <Icon15Icon
                  className={classNames(projectcss.all, sty.svg__jXjw2)}
                  role={"img"}
                />
              ) : null}
            </div>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "smallMobile") ? true : false
          ) ? (
            <div className={classNames(projectcss.all, sty.freeBox__rdBh)}>
              {(
                hasVariant(globalVariants, "screen", "smallMobile")
                  ? true
                  : false
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mm2Or
                  )}
                >
                  {hasVariant(globalVariants, "screen", "smallMobile")
                    ? "Payouts"
                    : "Enter some text"}
                </div>
              ) : null}
            </div>
          ) : null}
        </p.PlasmicLink>
      ) : null}
      {(hasVariant(globalVariants, "screen", "smallMobile") ? true : false) ? (
        <p.PlasmicLink
          className={classNames(projectcss.a, sty.link__ilIbX)}
          component={Link}
          platform={"nextjs"}
        >
          {(
            hasVariant(globalVariants, "screen", "smallMobile") ? true : false
          ) ? (
            <div className={classNames(projectcss.all, sty.freeBox__xApqr)}>
              {(
                hasVariant(globalVariants, "screen", "smallMobile")
                  ? true
                  : false
              ) ? (
                <Icon16Icon
                  className={classNames(projectcss.all, sty.svg__tJrva)}
                  role={"img"}
                />
              ) : null}
            </div>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "smallMobile") ? true : false
          ) ? (
            <div className={classNames(projectcss.all, sty.freeBox__flk2V)}>
              {(
                hasVariant(globalVariants, "screen", "smallMobile")
                  ? true
                  : false
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qoGm0
                  )}
                >
                  {hasVariant(globalVariants, "screen", "smallMobile")
                    ? "Payments"
                    : "Enter some text"}
                </div>
              ) : null}
            </div>
          ) : null}
        </p.PlasmicLink>
      ) : null}
      {(hasVariant(globalVariants, "screen", "smallMobile") ? true : false) ? (
        <p.PlasmicLink
          className={classNames(projectcss.a, sty.link__s5J7R)}
          component={Link}
          platform={"nextjs"}
        >
          {(
            hasVariant(globalVariants, "screen", "smallMobile") ? true : false
          ) ? (
            <div className={classNames(projectcss.all, sty.freeBox__m9R3D)}>
              {(
                hasVariant(globalVariants, "screen", "smallMobile")
                  ? true
                  : false
              ) ? (
                <Icon17Icon
                  className={classNames(projectcss.all, sty.svg__gvRhY)}
                  role={"img"}
                />
              ) : null}
            </div>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "smallMobile") ? true : false
          ) ? (
            <div className={classNames(projectcss.all, sty.freeBox__wLu13)}>
              {(
                hasVariant(globalVariants, "screen", "smallMobile")
                  ? true
                  : false
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yUxQ
                  )}
                >
                  {hasVariant(globalVariants, "screen", "smallMobile")
                    ? "My Family"
                    : "Enter some text"}
                </div>
              ) : null}
            </div>
          ) : null}
        </p.PlasmicLink>
      ) : null}
    </div>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root", "btnFooterNavItem"],
  btnFooterNavItem: ["btnFooterNavItem"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMenu__ArgProps,
      internalVariantPropNames: PlasmicMenu__VariantProps
    });

    return PlasmicMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMenu";
  } else {
    func.displayName = `PlasmicMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicMenu = Object.assign(
  // Top-level PlasmicMenu renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    btnFooterNavItem: makeNodeComponent("btnFooterNavItem"),
    // Metadata about props expected for PlasmicMenu
    internalVariantProps: PlasmicMenu__VariantProps,
    internalArgProps: PlasmicMenu__ArgProps
  }
);

export default PlasmicMenu;
/* prettier-ignore-end */
