// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3ekFgeJQEEmC58uuLfkDcf
// Component: NEp9vdTJ1Yn
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_imbewu_mobile_first.module.css"; // plasmic-import: 3ekFgeJQEEmC58uuLfkDcf/projectcss
import sty from "./PlasmicCardHowtoItem.module.css"; // plasmic-import: NEp9vdTJ1Yn/css

export const PlasmicCardHowtoItem__VariantProps = new Array();

export const PlasmicCardHowtoItem__ArgProps = new Array(
  "children",
  "slot",
  "slot2",
  "slot3"
);

function PlasmicCardHowtoItem__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__t27PA)}>
        <div className={classNames(projectcss.all, sty.freeBox___1Epm3)}>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___2W96)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__mcAEz)}>
              {p.renderPlasmicSlot({
                defaultContents: "01",
                value: args.slot,
                className: classNames(sty.slotTargetSlot)
              })}
            </div>

            <div className={classNames(projectcss.all, sty.freeBox___9DwOv)}>
              {p.renderPlasmicSlot({
                defaultContents: "Register",
                value: args.children,
                className: classNames(sty.slotTargetChildren)
              })}
            </div>
          </p.Stack>
        </div>
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__wbe7T)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <img
              alt={""}
              className={classNames(projectcss.img, sty.img__cvNUx)}
              src={"/plasmic/imbewu_mobile_first/images/how01Png.png"}
            />
          ),

          value: args.slot2
        })}
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__aQsNw)}>
        {p.renderPlasmicSlot({
          defaultContents:
            "Fill in your basic contact details and we’ll create your Imbewu profile ….",
          value: args.slot3,
          className: classNames(sty.slotTargetSlot3)
        })}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardHowtoItem__ArgProps,
      internalVariantPropNames: PlasmicCardHowtoItem__VariantProps
    });

    return PlasmicCardHowtoItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardHowtoItem";
  } else {
    func.displayName = `PlasmicCardHowtoItem.${nodeName}`;
  }
  return func;
}

export const PlasmicCardHowtoItem = Object.assign(
  // Top-level PlasmicCardHowtoItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicCardHowtoItem
    internalVariantProps: PlasmicCardHowtoItem__VariantProps,
    internalArgProps: PlasmicCardHowtoItem__ArgProps
  }
);

export default PlasmicCardHowtoItem;
/* prettier-ignore-end */
