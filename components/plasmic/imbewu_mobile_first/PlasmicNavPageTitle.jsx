// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3ekFgeJQEEmC58uuLfkDcf
// Component: _bfo_NMVKD
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantstPLuZHt02V } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: tPLuZHt02v/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_imbewu_mobile_first.module.css"; // plasmic-import: 3ekFgeJQEEmC58uuLfkDcf/projectcss
import sty from "./PlasmicNavPageTitle.module.css"; // plasmic-import: _bfo_NMVKD/css
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: _14--lQom8/icon

export const PlasmicNavPageTitle__VariantProps = new Array();

export const PlasmicNavPageTitle__ArgProps = new Array("pageTitle");

function PlasmicNavPageTitle__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantstPLuZHt02V()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <Icon11Icon
          data-plasmic-name={"btnBack"}
          data-plasmic-override={overrides.btnBack}
          className={classNames(projectcss.all, sty.btnBack)}
          role={"img"}
        />
      </div>

      {p.renderPlasmicSlot({
        defaultContents: (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__h8CQr
            )}
          >
            {"Enter some text"}
          </div>
        ),

        value: args.pageTitle
      })}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "btnBack"],
  freeBox: ["freeBox", "btnBack"],
  btnBack: ["btnBack"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavPageTitle__ArgProps,
      internalVariantPropNames: PlasmicNavPageTitle__VariantProps
    });

    return PlasmicNavPageTitle__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavPageTitle";
  } else {
    func.displayName = `PlasmicNavPageTitle.${nodeName}`;
  }
  return func;
}

export const PlasmicNavPageTitle = Object.assign(
  // Top-level PlasmicNavPageTitle renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    btnBack: makeNodeComponent("btnBack"),
    // Metadata about props expected for PlasmicNavPageTitle
    internalVariantProps: PlasmicNavPageTitle__VariantProps,
    internalArgProps: PlasmicNavPageTitle__ArgProps
  }
);

export default PlasmicNavPageTitle;
/* prettier-ignore-end */
