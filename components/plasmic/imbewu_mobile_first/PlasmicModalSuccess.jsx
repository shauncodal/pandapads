// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3ekFgeJQEEmC58uuLfkDcf
// Component: IIAFvYk7BD
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import IconRound from "../../IconRound"; // plasmic-import: fi0LamIfb0/component
import BtnNormal from "../../BtnNormal"; // plasmic-import: xohdOATSWS/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_imbewu_mobile_first.module.css"; // plasmic-import: 3ekFgeJQEEmC58uuLfkDcf/projectcss
import sty from "./PlasmicModalSuccess.module.css"; // plasmic-import: IIAFvYk7BD/css
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: w3I0pcFrtd/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: b4TKWwyCPY/icon

export const PlasmicModalSuccess__VariantProps = new Array();

export const PlasmicModalSuccess__ArgProps = new Array();

function PlasmicModalSuccess__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__gVzGq)}>
        <Icon4Icon
          data-plasmic-name={"btnClose"}
          data-plasmic-override={overrides.btnClose}
          className={classNames(projectcss.all, sty.btnClose)}
          role={"img"}
        />

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__uVbf0)}
        >
          <IconRound
            data-plasmic-name={"iconRound"}
            data-plasmic-override={overrides.iconRound}
            className={classNames("__wab_instance", sty.iconRound)}
            icon={
              <Icon21Icon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            }
          />

          <div className={classNames(projectcss.all, sty.freeBox___65Ylj)}>
            <div
              data-plasmic-name={"errorTxt"}
              data-plasmic-override={overrides.errorTxt}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.errorTxt
              )}
            >
              {"You successfully added a new beneficiary:) "}
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__it7Ik)}>
              <BtnNormal
                className={classNames("__wab_instance", sty.btnNormal__tbg5J)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oEf9B
                  )}
                >
                  {"add another?"}
                </div>
              </BtnNormal>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__zrJt0)}>
              <BtnNormal
                className={classNames("__wab_instance", sty.btnNormal___7YrA4)}
                ghostWhite={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kWohE
                  )}
                >
                  {"nope. ClOSE AND CONTINUE"}
                </div>
              </BtnNormal>
            </div>
          </div>
        </p.Stack>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "btnClose", "iconRound", "svg", "errorTxt"],
  btnClose: ["btnClose"],
  iconRound: ["iconRound", "svg"],
  svg: ["svg"],
  errorTxt: ["errorTxt"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicModalSuccess__ArgProps,
      internalVariantPropNames: PlasmicModalSuccess__VariantProps
    });

    return PlasmicModalSuccess__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicModalSuccess";
  } else {
    func.displayName = `PlasmicModalSuccess.${nodeName}`;
  }
  return func;
}

export const PlasmicModalSuccess = Object.assign(
  // Top-level PlasmicModalSuccess renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    btnClose: makeNodeComponent("btnClose"),
    iconRound: makeNodeComponent("iconRound"),
    svg: makeNodeComponent("svg"),
    errorTxt: makeNodeComponent("errorTxt"),
    // Metadata about props expected for PlasmicModalSuccess
    internalVariantProps: PlasmicModalSuccess__VariantProps,
    internalArgProps: PlasmicModalSuccess__ArgProps
  }
);

export default PlasmicModalSuccess;
/* prettier-ignore-end */
