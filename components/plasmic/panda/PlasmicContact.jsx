// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: p6tU1MHcNvqW8cSkqwHcz5
// Component: 6fKLW8gBeO
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TopMenu from "../../TopMenu"; // plasmic-import: dpTc1VI3P5/component
import TextInput from "../../TextInput"; // plasmic-import: RMrm46xZDvn/component
import Button from "../../Button"; // plasmic-import: oWV9TLFVNrF/component
import { useScreenVariants as useScreenVariants_8UQYRsGwai } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 8U-qYRsGwai/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_panda.module.css"; // plasmic-import: p6tU1MHcNvqW8cSkqwHcz5/projectcss
import sty from "./PlasmicContact.module.css"; // plasmic-import: 6fKLW8gBeO/css
import VerticalHRsvgIcon from "./icons/PlasmicIcon__VerticalHRsvg"; // plasmic-import: XmHlOAzX_A/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: t9wEul69dC/icon
import IconInstasvgIcon from "./icons/PlasmicIcon__IconInstasvg"; // plasmic-import: J9OPz5GQhT/icon
import IconTwsvgIcon from "./icons/PlasmicIcon__IconTwsvg"; // plasmic-import: xWz3mP7J7n/icon
import IconFbsvgIcon from "./icons/PlasmicIcon__IconFbsvg"; // plasmic-import: -3jNUbjHt8/icon

export const PlasmicContact__VariantProps = new Array();

export const PlasmicContact__ArgProps = new Array();

function PlasmicContact__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_8UQYRsGwai()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <TopMenu
            data-plasmic-name={"topMenu"}
            data-plasmic-override={overrides.topMenu}
            className={classNames("__wab_instance", sty.topMenu)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__xcUbo)}>
            <div className={classNames(projectcss.all, sty.freeBox__jdFik)}>
              <div className={classNames(projectcss.all, sty.freeBox__abrpf)} />

              <div className={classNames(projectcss.all, sty.freeBox___5GhXt)}>
                <div className={classNames(projectcss.all, sty.freeBox__eI2Mu)}>
                  <VerticalHRsvgIcon
                    className={classNames(projectcss.all, sty.svg__v9O7L)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tRdb2
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "desktopOnly")
                      ? "Contact Us"
                      : "Contact Us"}
                  </div>
                </div>
              </div>

              <div
                className={classNames(projectcss.all, sty.freeBox___51Yj6)}
              />
            </div>
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__drdf1)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___6GcA6)}
            >
              <button
                data-plasmic-name={"keepagirlinschool"}
                data-plasmic-override={overrides.keepagirlinschool}
                className={classNames(
                  projectcss.button,
                  projectcss.__wab_text,
                  sty.keepagirlinschool
                )}
                disabled={
                  hasVariant(globalVariants, "screen", "desktopOnly")
                    ? false
                    : false
                }
              >
                {hasVariant(globalVariants, "screen", "desktopOnly")
                  ? "#KeepAGirlInSchool"
                  : "#KeepAGirlInSchool"}
              </button>

              <button
                data-plasmic-name={"ecofriendly"}
                data-plasmic-override={overrides.ecofriendly}
                className={classNames(
                  projectcss.button,
                  projectcss.__wab_text,
                  sty.ecofriendly
                )}
              >
                {"#EcoFriendly"}
              </button>

              <button
                data-plasmic-name={"periodpoverty"}
                data-plasmic-override={overrides.periodpoverty}
                className={classNames(
                  projectcss.button,
                  projectcss.__wab_text,
                  sty.periodpoverty
                )}
              >
                {"#PeriodPoverty"}
              </button>
            </p.Stack>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__gq4R)}
            >
              <Icon12Icon
                className={classNames(projectcss.all, sty.svg___4NAVm)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cWmy
                )}
              >
                {"Contact Us"}
              </div>
            </p.Stack>

            <TextInput
              data-plasmic-name={"firstName"}
              data-plasmic-override={overrides.firstName}
              aria-label={""}
              className={classNames("__wab_instance", sty.firstName)}
              placeholder={"First Name"}
            />

            <TextInput
              data-plasmic-name={"lastName"}
              data-plasmic-override={overrides.lastName}
              aria-label={""}
              className={classNames("__wab_instance", sty.lastName)}
              placeholder={"Last Name"}
            />

            <TextInput
              data-plasmic-name={"email"}
              data-plasmic-override={overrides.email}
              aria-label={""}
              className={classNames("__wab_instance", sty.email)}
              placeholder={"Email Address"}
            />

            <textarea
              data-plasmic-name={"message"}
              data-plasmic-override={overrides.message}
              className={classNames(projectcss.textarea, sty.message)}
              rows={6}
              value={"Your Message"}
            />

            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              color={"softGreen"}
              size={"compact"}
            >
              {"Send my Query"}
            </Button>
          </p.Stack>

          <div className={classNames(projectcss.all, sty.freeBox__nd1Bd)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uaSpj
              )}
            >
              {hasVariant(globalVariants, "screen", "desktopOnly") ? (
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.a,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.link__li1Oy
                    )}
                    component={Link}
                    href={"mailto:info@pandapads.co.za"}
                    platform={"nextjs"}
                  >
                    {"info@pandapads.co.za"}
                  </p.PlasmicLink>
                  <React.Fragment>
                    {
                      "\nSandi: 0834770123\nRebecca: 0795011862\nWe are based in Randburg, Johannesburg.\n"
                    }
                  </React.Fragment>
                </React.Fragment>
              ) : (
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.a,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.link___1Hc4U
                    )}
                    component={Link}
                    href={"mailto:info@pandapads.co.za"}
                    platform={"nextjs"}
                  >
                    {"info@pandapads.co.za"}
                  </p.PlasmicLink>
                  <React.Fragment>
                    {
                      "\nSandi: 0834770123\nRebecca: 0795011862\nWe are based in Randburg, Johannesburg.\n"
                    }
                  </React.Fragment>
                </React.Fragment>
              )}
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__nGyIj)}>
              <IconInstasvgIcon
                data-plasmic-name={"instagram"}
                data-plasmic-override={overrides.instagram}
                className={classNames(projectcss.all, sty.instagram)}
                role={"img"}
              />

              <div className={classNames(projectcss.all, sty.freeBox___9TIMh)}>
                <IconTwsvgIcon
                  data-plasmic-name={"twitter"}
                  data-plasmic-override={overrides.twitter}
                  className={classNames(projectcss.all, sty.twitter)}
                  role={"img"}
                />

                <div className={classNames(projectcss.all, sty.freeBox___9Jhu)}>
                  <IconFbsvgIcon
                    data-plasmic-name={"facebook"}
                    data-plasmic-override={overrides.facebook}
                    className={classNames(projectcss.all, sty.facebook)}
                    role={"img"}
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "topMenu",
    "keepagirlinschool",
    "ecofriendly",
    "periodpoverty",
    "firstName",
    "lastName",
    "email",
    "message",
    "button",
    "instagram",
    "twitter",
    "facebook"
  ],

  topMenu: ["topMenu"],
  keepagirlinschool: ["keepagirlinschool"],
  ecofriendly: ["ecofriendly"],
  periodpoverty: ["periodpoverty"],
  firstName: ["firstName"],
  lastName: ["lastName"],
  email: ["email"],
  message: ["message"],
  button: ["button"],
  instagram: ["instagram"],
  twitter: ["twitter"],
  facebook: ["facebook"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicContact__ArgProps,
      internalVariantPropNames: PlasmicContact__VariantProps
    });

    return PlasmicContact__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContact";
  } else {
    func.displayName = `PlasmicContact.${nodeName}`;
  }
  return func;
}

export const PlasmicContact = Object.assign(
  // Top-level PlasmicContact renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    topMenu: makeNodeComponent("topMenu"),
    keepagirlinschool: makeNodeComponent("keepagirlinschool"),
    ecofriendly: makeNodeComponent("ecofriendly"),
    periodpoverty: makeNodeComponent("periodpoverty"),
    firstName: makeNodeComponent("firstName"),
    lastName: makeNodeComponent("lastName"),
    email: makeNodeComponent("email"),
    message: makeNodeComponent("message"),
    button: makeNodeComponent("button"),
    instagram: makeNodeComponent("instagram"),
    twitter: makeNodeComponent("twitter"),
    facebook: makeNodeComponent("facebook"),
    // Metadata about props expected for PlasmicContact
    internalVariantProps: PlasmicContact__VariantProps,
    internalArgProps: PlasmicContact__ArgProps
  }
);

export default PlasmicContact;
/* prettier-ignore-end */
